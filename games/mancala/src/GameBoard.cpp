#include "GameBoard.h"
#include <sstream>
#include <iomanip>
#include <iostream>

// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// //(((((((((##################((&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&&&&&&&&&&&&&&@@@@@&@@@@@@@&&%,.      ....,,*(#%%%%%%%%%%%%##((//*,,,,,,,,,,
// //(((((((########(((((######(#@@@@@@@@@@@@@@&&&@@@@@@@@@@@@@&&&@@&&@&&&&&&&@&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@&&&&&&&&&&@@@@&&&&&&&&&&&&@@@&@@@@@@@&&&*.         .,*/##%%%%%%%%%%%%##((/**,,,,,,,,,
// //(((((####((((((((((###(((##@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@&&@@@@&&&&%%%%%%%&&@@&&&&&&&@@@@@@@@@@@@@@@@@@@@@@&@@@&@&&&%%%&&&&&@@@@@@@@@&&&&&&&&&&@@@@@&@&@&*         ..*/(#%%%%%%%%%%%%###(/**,,,,,,,,,
// //(((((####(((((((#####((((#@@@@@@@@@@@@@@@&@@@@@@@@@@&@&&@@@@@@@@&&&&%%%%%%%&&&@&@@&&&&&&@@@@@@@@@@@@@@@@@@@@@@@&&@&%&#%%&&&&&@@@@@@@@@@@@&&&&&&&@@@@@@@@&@&*       ..,*/(#%%%%%%%########((/*,,,,,,,,,
// *//((((#####(((((#########%@@@@@@@@@@@@@@@@@@@@@@@@@@&@&@@@@@@@@@@&&&&&&%%%&&&&&@&@&&@@&@&&@@@@@@@@@@@@@@@@%@@@@&%&@&&%%&%&%@@@@@@@@@@@@@@@&&@&&&&%@@@&@@@&&&&/.......,,*/(#####%%%#####%###(/*,,,,,,,,,
// *//(((###################%@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@&&&&&%%%%%%%%%%%%%%&@&&&@@@@@@@@@@@@@@&@@@@@(((((((////////////&(&&&&&&&&%&&&&&&@@@&@@@&&&&(,,.,,,,*/(#####%%%%%%%%%%%##(/*,,,,,,,,,
// *//(((###############(((#@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@&@&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&@&&&&@@&%%%%%&@@&&@@@@#(((((//(//((///////*****,,,,,*#&&&&&%@@@@@@&&&@&/,,,,,**/(#####%%%%%%%%%%%%#(/*,,,,,..,,
// */((((##############((((&@@@@@@@@@@@@@@@@@@@@@@@@@&@&%%%%%%%%%%%%####%%###%&&&&@@&%%%%%%#@@&&&%%%%%%%%%%%%&@@@#((((%&&%//######%##((/////,,,,,(#&&&&&&@&@@@@@&&&&*,,,,**/(###%%%%%%%%%%%%%##(/*,,,......
// */(((##################%@@@@@@@@@@@@@@@@@@@@@@@@@@@&&%%%%%%%%%%%%%%%&&&&%%%%%%%%&%#&&&&%#%@&@&%&@@@@@&&&&%@@@@(%&&(#&&&&(//***&####(((///**,,,*#%&&&&%&@@&@@@&&&%%*,,,*/(##%###%%%%%%%%%%%##(/*,..... . 
// *//((##############(((#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%%%%%%%%%%%%%&&&%########%&&&&&&&%#%&@@&&&@%%%%%#(/(@&@@@(#&&&&&@@&&%%##(((####(((///**,,,#%&&&&%&@&&@@@&@&%%*..,,/(#############%%%%##(/*,.       
// */(((##############(((#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%%%%%%%%%%%%%&&&&&&&&&&&&%&&&&&&&&%%&@&@&%%%%%%%%#((/*%&@%#%&&%%%%%%%##((((((((((///***,,,#%&&&&&&@&&@@@@&&&&#. .,/((####((((##%%%%%%##(/*,.       
// *//((#################&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%&&&&%%%%%%%%%%%%%%%%%@@&%%%%%%%%%%###(/*,&&%%%%%%%%%%###((((((((////***,,,,#&&@&%&&&&&@@@@&&&&%*.,*/(#####((((##%%%%%%###(/,..      
// *//((#################@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@&%%%%%%%%%%%%###((/*,/&%%%%%%%%%%###((((///////***,,,,%&&&&&&&%&&@@@@&&&&%#..,/(#######(######%#%##(//,..      
// *//(((######((((#####%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&%%%%%%%%%%%#####(#%(/,%&&%%%%%%%#####(((///////****,#&&&&%@&&&%%&&@&@@&&&%%..,*(##############%%%##(/*,..     .
// *//((########(((#####@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%@&&&&%##%%%&%######(/%%%#/,&&&&&&%%#%#####((///////****&&&&&&@@@&&%%%&@@@@@&&%%%*.,/(########%##(####%##(//*,.......
// *//((################&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@&%%%%%%%%%%%%%%%%%%&&&&&&&&&%###%%&&%###((#&&%#/,#%&&&&&&&&&#####((((/////%&&&&&&&@@@@@@%#%&&@&@@@&&&%%(,*/(###############%###(((/*,......
// **/((#######%#######%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&@@@&&&&@&&&&&&&&@&&&&&&&&%%%%&%%####%%%%##((###/*/(##%%%%&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@%%%&&@@&@@&&&%%#**/(##############%%%%%%#(/*,,.....
// **/((###############&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%%%%%%&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%###((///(##%%%####%%&&&&&&&&%%%#/,*%&@@@@@@@@@&%%%%@@@&@&&&%%%#/,/((#############%%%%%%%#(**,.....
// **/(################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&%%%%%%%%%%%%%%%%%%#((/////((#%#(((((///****,,,...,*(&@@@@@@@@@&%%%#@&@&%&&&%#%#**/(###############%%%%%%#(/*,.....
// */(#################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#(/(/////(##((/////*****,,...,*/&@@@@@@@@@@@%%%#&&&&%&&&%#%#/*(###########%%#%%%%%&%%%#/*,.... 
// ((###(((((#########%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#(////***/(##(////*****,,,...#&&@@@@@@@@@@@@%##&%&@&%&&&%%##**(###########%%%%%%%%%%%%(/*,.... 
// %%%##(((((#%######(#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%%%%%%%#%%%%%%%%%%%%%%%%%%%%%%#######%%%%%%%%#####((((/**(##(//*****,,,,,,.#&@@@@@@@@@@@@@&%##&&&@&&&&&%##(**/(###((######%%####%%%%#(*,......
// %%%%#######%%#####(#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%#%###%%%%%%%%%%%%%%%%%%%%####%###(((((##(((((((((((##,/##(///****,,,,..%&@@@@@@@@@@@@@&%##&@&&&%&&&&###(,*/(###((############%%%#(/*,......
// %%%%#%%###%%#######%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#############%%%%%%%%%%%&%%#######(((((##(((((/*(((//#((#((//****,,,,.,%&@@@@@@@@@@@@@@&%%&&@&&&%&%%%###/.,/(###((##%%%#####%####((/,,..... 
// %%####%####%########@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##########%%%%%%%%&%%%%%%###%%%%%%%%%%%%%%###((####%###(//****,,,,.%&&@@@@@@@@@@@@@@&%%&%@&&&&#&&&%###..,*(#######%%%%%%%%%%###(/**,... ..
// %%##############(##(%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#########%%%%%%%%%%%%%%%%%%#############((((///*,/((///***,,,,%&&@@@@@@@@@@@@@@@&%%%@&@&&&&&&&&%%%/..,/(###########%%%%%%%%##((/*,.... 
// %%%%%#############(##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#################%%######%#%%%########((((//****///***,,,,&&@@@@@@@@@@@@@@@@@&%%&@&@&&@&&&&&&&&#..,*/##%%%%########%%%%%%####(/,,. . 
// %%%%%%%###%##########&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&###################%##%%#%##########((/*****///***,,%&@@@@@@@@@@@@@@@@@@@@&&&@&@&@@@&@@&@&&/...,*/(####%########%%%%%####(/*,..   
// %%%%%%%#%#%###########&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@####################%%#########((//*****///**,%&@@@@@@@@@@@@@@@@@@@@@@&&&@@@@@@@@@@@&&&*....,*/((####%%%%%%%%%%%%%###((/*,.    
// %%%%%%%%%%%#############@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&########################(((//****/****/@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@&@&&#/*,...,*/((#####%%%%&%%%%%%%##((/*,,.    
// %%%%#%%%%%%############((%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@###################((///********&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@&%#(/*,....,*(#####%%%%%%%%%%%%%%##((/*,.    
// %%#########################%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%##############(((///****,,/&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&@@@@@&@&&&%%%#(/*,....,*/##%%#####%%%%%%%%%%%%%#(*,.    
// %%###########################%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&############((///***,,,*,,..............,#&@&&&@@@@@@&&&&&&%&%%%######%%%#(*,.. ..*/(#%%%###%%%%%%%%&%%%###(*,.    
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&@@@@@@@@@@@@@@@@@@@@@@@&@@%&%##(//%@@@@@@@@@@@@@@@@&%%%%%%%%%%%###(((///%&(***************(##(((///****/(##%%%%%%%%%%%%%&&%%#(//***/((#%%%%%%%%%%&&&&&&&&%%%%#(/*****
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ _   _  ____    _____ ______    _____ _______    _______ ______ __  __ ______ _   _ _______ _____ _ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@| \ | |/ __ \  |_   _|  ____|  / ____|__   __|/\|__   __|  ____|  \/  |  ____| \ | |__   __/ ____| |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|  \| | |  | |   | | | |__    | (___    | |  /  \  | |  | |__  | \  / | |__  |  \| |  | | | (___ | |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@| . ` | |  | |   | | |  __|    \___ \   | | / /\ \ | |  |  __| | |\/| |  __| | . ` |  | |  \___ \| |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@| |\  | |__| |  _| |_| |       ____) |  | |/ ____ \| |  | |____| |  | | |____| |\  |  | |  ____) |_|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|_| \_|\____/  |_____|_|      |_____/   |_/_/    \_\_|  |______|_|  |_|______|_| \_|  |_| |_____/(_)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(Or at least very minimal)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

// GameBoard implementation for Mancala
// This file was implemented with CUDA in mind, so if statements and 
// trinary operators have been kept to a minimum to avoid warp divergence.

namespace Game {

// Init the board state
void GameBoard::initBoard()
{
    // Init player 1 side
    boardState[P1_GOAL] = 0;
    for(uint8_t i = P1_START; i < P1_GOAL; i++)
    {
        boardState[i] = 4;
    }

    // Init player 2 side
    boardState[P2_GOAL] = 0;
    for(uint8_t i = P2_START; i < P2_GOAL; i++)
    {
        boardState[i] = 4;
    }
}

// Execute a move on the board for a given player
moveresult_t GameBoard::executeMove(move_t move, Player::playernum_t playerNum)
{
    moveresult_t result = 0;
    squarestate_t playerStart = playerNum*P2_START;
    squarestate_t playerGoal = playerStart + P1_GOAL;

    // Check move bounds
    if(move >= playerStart && move < playerGoal)
    {
        squarestate_t startHand = boardState[move];
        boardState[move] = 0;

        // Place pieces
        squarestate_t oppositeGoal = playerGoal + P2_START;
        boardpos_t pos = move + 1;
        for(squarestate_t placed = 0; placed < startHand; pos = (pos + 1) % 14)
        {
            squarestate_t addValue = (pos != oppositeGoal); // Either 1 or 0
            placed += addValue;
            boardState[pos] += addValue;
        }
        boardpos_t endPos = (pos + 13) % 14;

        // Handle end on empty space
        if(boardState[endPos] == 1)
        {
            // Capture last piece
            boardState[endPos] = 0;
            boardState[playerGoal]++;

            // Capture opposite pieces
            boardpos_t otherPlayerSpot = 12 - endPos;
            boardState[playerGoal] += boardState[otherPlayerSpot];
            boardState[otherPlayerSpot] = 0;
        }
        else
        {
            // Handle end on goal (go again)
            result += (endPos == playerGoal);
        }

        // Add 1 to result for valid move
        result++;
    }
    
    return result;
}

// Return the possible move on the board for a given player
movecount_t GameBoard::getMoves(movelist_t& movesOut, Player::playernum_t playerNum)
{
    // Loop through each move
    movecount_t moveCount = 0;
    squarestate_t playerStart = playerNum*P2_START;
    squarestate_t playerGoal = playerStart + P1_GOAL;
    for(uint8_t i = playerStart; i < playerGoal; i++)
    {
        movesOut[moveCount] = i;            // Store variable
        moveCount += (boardState[i] != 0);  // Move up list if valid move
    }
    movesOut[moveCount] = 0;    // Reset last variable in case of false set

    return moveCount;
}

// Return the board result
boardresult_t GameBoard::getBoardResult()
{
    uint8_t p1Score = 0;
    for(uint8_t i = P1_START; i < P1_GOAL; i++)
    {
        p1Score += boardState[i];
    }

    uint8_t p2Score = 0;
    for(uint8_t i = P2_START; i < P2_GOAL; i++)
    {
        p2Score += boardState[i];
    }

    return (p1Score == 0) + (p2Score == 0)*2;
}

// Return the state of the board in string format
std::string GameBoard::getBoardStateString()
{
    // Create stringstream
    std::stringstream boardStateBuf;

    // Print player 2 side
    for(int i = P2_GOAL-1; i > P1_GOAL; --i) {
        boardStateBuf << " " << std::setw(2) << std::to_string(boardState[i]);
    }

    // Print goals
    boardStateBuf << std::endl << std::to_string(boardState[P2_GOAL])
                  << std::setw(19) << std::to_string(boardState[P1_GOAL]) << std::endl;

    // Print player 1 side
    for(int i = P1_START; i < P1_GOAL; ++i) {
        boardStateBuf << " " << std::setw(2) << std::to_string(boardState[i]);
    }

    // Return string stream
    return boardStateBuf.str();
}

}